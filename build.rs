#[path = "src/vcpu/vcpucontext.rs"] mod vcpucontext;

use vcpucontext::*;
use std::io::Write;

macro_rules! offset_define_add {
    ($list:expr, $name:expr, $ctx:expr, $reg:expr) => {
        $list.push(ContextOffset::new(String::from($name), field_offset(&$ctx, &$reg)));
    };
}

macro_rules! hu_csr_add {
    ($list:expr, $name:expr, $num:expr) => {
        $list.push(ContextOffset::new(String::from($name), $num));
    };
}

fn field_offset<T1, T2>(ctx: &T1, reg: &T2) -> u64 {
    let ctx_ptr = (ctx as *const T1) as u64;
    let reg_ptr = (reg as *const T2) as u64;

    reg_ptr - ctx_ptr
}

struct ContextOffset {
    name: String,
    offset: u64,
}

impl ContextOffset {
    pub fn new(name: String, offset: u64) -> Self {
        Self {
            name,
            offset,
        }
    }
}

// Write asm file: src/asm_offset.S
fn write_asm_offset_file(offset_define_list: &Vec<ContextOffset>) {
    let mut asm_file = std::fs::File::create("src/asm_offset.S").expect("create failed");
    asm_file.write_all("/* This file is generated by build.rs. Please do not modify it! */\n\n".as_bytes()).expect("write failed");

    for i in offset_define_list {
        asm_file.write_all("// ".as_bytes()).expect("write failed");
        asm_file.write_all(i.name.as_bytes()).expect("write failed");
        asm_file.write_all("\n".as_bytes()).expect("write failed");
        asm_file.write_all(".macro SAVE_".as_bytes()).expect("write failed");
        asm_file.write_all(i.name.as_bytes()).expect("write failed");
        asm_file.write_all(" ctx, reg\n".as_bytes()).expect("write failed");
        asm_file.write_all("    sd \\reg, (".as_bytes()).expect("write failed");
        asm_file.write_all(i.offset.to_string().as_bytes()).expect("write failed");
        asm_file.write_all(")(\\ctx)\n.endm\n\n".as_bytes()).expect("write failed");

        asm_file.write_all(".macro RESTORE_".as_bytes()).expect("write failed");
        asm_file.write_all(i.name.as_bytes()).expect("write failed");
        asm_file.write_all(" ctx, reg\n".as_bytes()).expect("write failed");
        asm_file.write_all("    ld \\reg, (".as_bytes()).expect("write failed");
        asm_file.write_all(i.offset.to_string().as_bytes()).expect("write failed");
        asm_file.write_all(")(\\ctx)\n.endm\n".as_bytes()).expect("write failed");

        asm_file.write_all("\n".as_bytes()).expect("write failed");
    }
}

// Write asm file: src/asm_csr.S
fn write_asm_csr_file(hu_csr_list: &Vec<ContextOffset>) {
    let mut csr_asm_file = std::fs::File::create("src/asm_csr.S").expect("create failed");
    csr_asm_file.write_all("/* This file is generated by build.rs. Please do not modify it! */\n\n".as_bytes()).expect("write failed");

    for i in hu_csr_list {
        // macro for CSRRW_CSR
        csr_asm_file.write_all("// ".as_bytes()).expect("write failed");
        csr_asm_file.write_all(i.name.as_bytes()).expect("write failed");
        csr_asm_file.write_all("\n".as_bytes()).expect("write failed");
        csr_asm_file.write_all(".macro CSRRW_".as_bytes()).expect("write failed");
        csr_asm_file.write_all(i.name.as_bytes()).expect("write failed");
        csr_asm_file.write_all(" reg1, reg2\n".as_bytes()).expect("write failed");
        csr_asm_file.write_all("    csrrw \\reg1, ".as_bytes()).expect("write failed");
        csr_asm_file.write_all(i.offset.to_string().as_bytes()).expect("write failed");
        csr_asm_file.write_all(", \\reg2\n.endm\n".as_bytes()).expect("write failed");
        csr_asm_file.write_all("\n".as_bytes()).expect("write failed");

        // macro for CSRW_CSR
        csr_asm_file.write_all(".macro CSRW_".as_bytes()).expect("write failed");
        csr_asm_file.write_all(i.name.as_bytes()).expect("write failed");
        csr_asm_file.write_all(" reg1\n".as_bytes()).expect("write failed");
        csr_asm_file.write_all("    csrw ".as_bytes()).expect("write failed");
        csr_asm_file.write_all(i.offset.to_string().as_bytes()).expect("write failed");
        csr_asm_file.write_all(", \\reg1\n.endm\n".as_bytes()).expect("write failed");
        csr_asm_file.write_all("\n".as_bytes()).expect("write failed");

        //macro for CSRR_CSR
        csr_asm_file.write_all(".macro CSRR_".as_bytes()).expect("write failed");
        csr_asm_file.write_all(i.name.as_bytes()).expect("write failed");
        csr_asm_file.write_all(" reg1\n".as_bytes()).expect("write failed");
        csr_asm_file.write_all("    csrr \\reg1, ".as_bytes()).expect("write failed");
        csr_asm_file.write_all(i.offset.to_string().as_bytes()).expect("write failed");
        csr_asm_file.write_all("\n.endm\n".as_bytes()).expect("write failed");
        csr_asm_file.write_all("\n".as_bytes()).expect("write failed");
    }
}

fn main() {
    println!("cargo:warning=------------build.rs start!-------------");
    let vcpu = VcpuCtx::new();
    let mut offset_define_list: Vec<ContextOffset> = Vec::new();

    // GP offset
    let mut gp_list: Vec<ContextOffset> = Vec::new();

    offset_define_add!(gp_list, "X0", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[0]);
    offset_define_add!(gp_list, "X1", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[1]);
    offset_define_add!(gp_list, "X2", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[2]);
    offset_define_add!(gp_list, "X3", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[3]);
    offset_define_add!(gp_list, "X4", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[4]);
    offset_define_add!(gp_list, "X5", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[5]);
    offset_define_add!(gp_list, "X6", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[6]);
    offset_define_add!(gp_list, "X7", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[7]);
    offset_define_add!(gp_list, "X8", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[8]);
    offset_define_add!(gp_list, "X9", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[9]);
    offset_define_add!(gp_list, "X10", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[10]);
    offset_define_add!(gp_list, "X11", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[11]);
    offset_define_add!(gp_list, "X12", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[12]);
    offset_define_add!(gp_list, "X13", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[13]);
    offset_define_add!(gp_list, "X14", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[14]);
    offset_define_add!(gp_list, "X15", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[15]);
    offset_define_add!(gp_list, "X16", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[16]);
    offset_define_add!(gp_list, "X17", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[17]);
    offset_define_add!(gp_list, "X18", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[18]);
    offset_define_add!(gp_list, "X19", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[19]);
    offset_define_add!(gp_list, "X20", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[20]);
    offset_define_add!(gp_list, "X21", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[21]);
    offset_define_add!(gp_list, "X22", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[22]);
    offset_define_add!(gp_list, "X23", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[23]);
    offset_define_add!(gp_list, "X24", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[24]);
    offset_define_add!(gp_list, "X25", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[25]);
    offset_define_add!(gp_list, "X26", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[26]);
    offset_define_add!(gp_list, "X27", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[27]);
    offset_define_add!(gp_list, "X28", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[28]);
    offset_define_add!(gp_list, "X29", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[29]);
    offset_define_add!(gp_list, "X30", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[30]);
    offset_define_add!(gp_list, "X31", vcpu.host_ctx.gp_regs, vcpu.host_ctx.gp_regs.x_reg[31]);

    // SYS offset
    let mut sys_list: Vec<ContextOffset> = Vec::new();

    offset_define_add!(sys_list, "HUVSSTATUS", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvsstatus);
    offset_define_add!(sys_list, "HUVSIP", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvsip);
    offset_define_add!(sys_list, "HUVSIE", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvsie);
    offset_define_add!(sys_list, "HUVSTVEC", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvstvec);
    offset_define_add!(sys_list, "HUVSSCRATCH", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvsscratch);
    offset_define_add!(sys_list, "HUVSEPC", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvsepc);
    offset_define_add!(sys_list, "HUVSCAUSE", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvscause);
    offset_define_add!(sys_list, "HUVSTVAL", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvstval);
    offset_define_add!(sys_list, "HUVSATP", vcpu.guest_ctx.sys_regs, vcpu.guest_ctx.sys_regs.huvsatp);

    // HYP offset
    let mut hyp_list: Vec<ContextOffset> = Vec::new();

    offset_define_add!(hyp_list, "HUSTATUS", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hustatus);
    offset_define_add!(hyp_list, "HUEDELEG", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.huedeleg);
    offset_define_add!(hyp_list, "HUIDELEG", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.huideleg);
    offset_define_add!(hyp_list, "HUVIP", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.huvip);
    offset_define_add!(hyp_list, "HUIP", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.huip);
    offset_define_add!(hyp_list, "HUIE", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.huie);
    offset_define_add!(hyp_list, "HUGEIP", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hugeip);
    offset_define_add!(hyp_list, "HUGEIE", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hugeie);
    offset_define_add!(hyp_list, "HUCOUNTEREN", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hucounteren);
    offset_define_add!(hyp_list, "HUTIMEDELTA", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hutimedelta);
    offset_define_add!(hyp_list, "HUTIMEDELTAH", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hutimedeltah);
    offset_define_add!(hyp_list, "HUTVAL", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hutval);
    offset_define_add!(hyp_list, "HUTINST", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hutinst);
    offset_define_add!(hyp_list, "HUGATP", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.hugatp);
    offset_define_add!(hyp_list, "UTVEC", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.utvec);
    offset_define_add!(hyp_list, "UEPC", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.uepc);
    offset_define_add!(hyp_list, "USCRATCH", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.uscratch);
    offset_define_add!(hyp_list, "UTVAL", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.utval);
    offset_define_add!(hyp_list, "UCAUSE", vcpu.guest_ctx.hyp_regs, vcpu.guest_ctx.hyp_regs.ucause);

    // HOST_GP
    for i in &gp_list {
        let mut name1 = "HOST_GP_".to_string();
        let name2 = i.name.to_string();
        name1 += &name2;

        let offset = field_offset(&vcpu, &vcpu.host_ctx.gp_regs) + i.offset;
        offset_define_list.push(ContextOffset::new(name1, offset));
    }

    // HOST_HYP
    for i in &hyp_list {
        let mut name1 = "HOST_HYP_".to_string();
        let name2 = i.name.to_string();
        name1 += &name2;

        let offset = field_offset(&vcpu, &vcpu.host_ctx.hyp_regs) + i.offset;
        offset_define_list.push(ContextOffset::new(name1, offset));
    }

    // GUEST_GP
    for i in &gp_list {
        let mut name1 = "GUEST_GP_".to_string();
        let name2 = i.name.to_string();
        name1 += &name2;

        let offset = field_offset(&vcpu, &vcpu.guest_ctx.gp_regs) + i.offset;
        offset_define_list.push(ContextOffset::new(name1, offset));
    }

    // GUEST_HYP
    for i in &hyp_list {
        let mut name1 = "GUEST_HYP_".to_string();
        let name2 = i.name.to_string();
        name1 += &name2;

        let offset = field_offset(&vcpu, &vcpu.guest_ctx.hyp_regs) + i.offset;
        offset_define_list.push(ContextOffset::new(name1, offset));
    }

    // GUEST_SYS
    for i in &sys_list {
        let mut name1 = "GUEST_SYS_".to_string();
        let name2 = i.name.to_string();
        name1 += &name2;

        let offset = field_offset(&vcpu, &vcpu.guest_ctx.sys_regs) + i.offset;
        offset_define_list.push(ContextOffset::new(name1, offset));
    }

    write_asm_offset_file(&offset_define_list);

    // CSR define
    let mut hu_csr_list: Vec<ContextOffset> = Vec::new();

    hu_csr_add!(hu_csr_list, "CSR_HUSTATUS", 0x800);
    hu_csr_add!(hu_csr_list, "CSR_HUEDELEG", 0x802);
    hu_csr_add!(hu_csr_list, "CSR_HUIDELEG", 0x803);
    hu_csr_add!(hu_csr_list, "CSR_HUIE", 0x804);
    hu_csr_add!(hu_csr_list, "CSR_HUCOUNTEREN", 0x806);
    hu_csr_add!(hu_csr_list, "CSR_HUTVAL", 0x843);
    hu_csr_add!(hu_csr_list, "CSR_HUVIP", 0x845);
    hu_csr_add!(hu_csr_list, "CSR_HUIP", 0x844);
    hu_csr_add!(hu_csr_list, "CSR_HUTINST", 0x84A);
    hu_csr_add!(hu_csr_list, "CSR_HUGATP", 0x880);
    hu_csr_add!(hu_csr_list, "CSR_HUTIMEDELTA", 0x805);
    hu_csr_add!(hu_csr_list, "CSR_HUTIMEDELTAH", 0x815);

    hu_csr_add!(hu_csr_list, "CSR_UTVEC", 0x5);
    hu_csr_add!(hu_csr_list, "CSR_USCRATCH", 0x40);
    hu_csr_add!(hu_csr_list, "CSR_UEPC", 0x41);
    hu_csr_add!(hu_csr_list, "CSR_UCAUSE", 0x42);
    hu_csr_add!(hu_csr_list, "CSR_UTVAL", 0x43);

    hu_csr_add!(hu_csr_list, "CSR_HUVSSTATUS", 0x400);
    hu_csr_add!(hu_csr_list, "CSR_HUVSIE", 0x404);
    hu_csr_add!(hu_csr_list, "CSR_HUVSTVEC", 0x405);
    hu_csr_add!(hu_csr_list, "CSR_HUVSSCRATCH", 0x440);
    hu_csr_add!(hu_csr_list, "CSR_HUVSEPC", 0x441);
    hu_csr_add!(hu_csr_list, "CSR_HUVSCAUSE", 0x480);
    hu_csr_add!(hu_csr_list, "CSR_HUVSTVAL", 0x443);
    hu_csr_add!(hu_csr_list, "CSR_HUVSIP", 0x444);
    hu_csr_add!(hu_csr_list, "CSR_HUVSATP", 0x480);

    write_asm_csr_file(&hu_csr_list);

    println!("cargo:warning=------------build.rs end!---------------");
}